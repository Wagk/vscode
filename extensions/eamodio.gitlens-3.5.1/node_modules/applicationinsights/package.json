{
  "_args": [
    [
      {
        "raw": "applicationinsights@0.20.0",
        "scope": null,
        "escapedName": "applicationinsights",
        "name": "applicationinsights",
        "rawSpec": "0.20.0",
        "spec": "0.20.0",
        "type": "version"
      },
      "C:\\Users\\Eric\\code\\vscode-gitlens"
    ]
  ],
  "_from": "applicationinsights@0.20.0",
  "_id": "applicationinsights@0.20.0",
  "_inCache": true,
  "_location": "/applicationinsights",
  "_nodeVersion": "6.10.3",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/applicationinsights-0.20.0.tgz_1494537777707_0.8206310912501067"
  },
  "_npmUser": {
    "name": "msftapplicationinsights",
    "email": "appinsights@microsoft.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "applicationinsights@0.20.0",
    "scope": null,
    "escapedName": "applicationinsights",
    "name": "applicationinsights",
    "rawSpec": "0.20.0",
    "spec": "0.20.0",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/applicationinsights/-/applicationinsights-0.20.0.tgz",
  "_shasum": "53b6fd92f87b7c5e1f264ecacce4a5b5ffc5af9d",
  "_shrinkwrap": null,
  "_spec": "applicationinsights@0.20.0",
  "_where": "C:\\Users\\Eric\\code\\vscode-gitlens",
  "bugs": {
    "url": "https://github.com/Microsoft/ApplicationInsights-node.js/issues"
  },
  "contributors": [
    {
      "name": "Application Insights Developer Support",
      "email": "aidevsupport@microsoft.com"
    },
    {
      "name": "Application Insights SDK Maintainers",
      "email": "appinsightssdk@microsoft.com"
    }
  ],
  "dependencies": {
    "diagnostic-channel": "0.1.0",
    "diagnostic-channel-publishers": "0.1.1",
    "zone.js": "0.7.6"
  },
  "description": "Microsoft Application Insights module for Node.js",
  "devDependencies": {
    "@types/mocha": "2.2.40",
    "@types/node": "4.2.4",
    "@types/sinon": "2.1.2",
    "mocha": "3.1.2",
    "node-mocks-http": "1.2.3",
    "sinon": "1.17.6",
    "typescript": "2.2.2"
  },
  "directories": {},
  "dist": {
    "shasum": "53b6fd92f87b7c5e1f264ecacce4a5b5ffc5af9d",
    "tarball": "https://registry.npmjs.org/applicationinsights/-/applicationinsights-0.20.0.tgz"
  },
  "gitHead": "6aef68cc370fe2cca03bae9208460a149ab1578b",
  "homepage": "https://github.com/Microsoft/ApplicationInsights-node.js#readme",
  "keywords": [
    "exception monitoring",
    "request monitoring",
    "performance monitoring",
    "application insights",
    "microsoft",
    "azure"
  ],
  "license": "MIT",
  "main": "./out/applicationinsights.js",
  "maintainers": [
    {
      "name": "msftapplicationinsights",
      "email": "appinsights@microsoft.com"
    }
  ],
  "name": "applicationinsights",
  "optionalDependencies": {},
  "readme": "# Application Insights for Node.js\r\n\r\n[![npm version](https://badge.fury.io/js/applicationinsights.svg)](http://badge.fury.io/js/applicationinsights)\r\n[![Build Status](https://travis-ci.org/Microsoft/ApplicationInsights-node.js.svg?branch=master)](https://travis-ci.org/Microsoft/ApplicationInsights-node.js)\r\n\r\n[Azure Application Insights][] gathers correlated metrics, logs, and exceptions\r\nfor each transaction (request) in a distributed system and reports these in the\r\nAzure Portal. Add this Node.js SDK to Node.js services in your system to include\r\ndeep info about Node.js processes and their external dependencies such as\r\ndatabase and cache services to those reports.\r\n\r\n[Azure Application Insights]: https://azure.microsoft.com/documentation/articles/app-insights-overview/\r\n\r\nBy default this library tracks incoming and outgoing HTTP requests, several\r\nsystem metrics, and exceptions. You can track more aspects of your app and\r\nsystem using the API described below.\r\n\r\n## Getting Started\r\n\r\n1. Create an Application Insights resource in Azure by following [these instructions][].\r\n2. Grab the _Instrumentation Key_ (aka \"ikey\") from the resource you created in\r\n   step 1. Later, you'll either add it to your app's environment variables or\r\n   use it directly in your scripts.\r\n3. Add the Application Insights Node.js SDK to your app's dependencies and\r\n   package.json:\r\n     ```bash\r\n     npm install --save applicationinsights\r\n     ```\r\n4. As early as possible in your app's code, load the Application Insights\r\n   package:\r\n     ```javascript\r\n     let appInsights = require('applicationinsights');\r\n     ```\r\n5. Configure the local SDK by calling `appInsights.setup('_your_ikey_');`, using\r\n   the ikey you grabbed in step 2. Or put this ikey in the\r\n   `APPINSIGHTS_INSTRUMENTATIONKEY` environment variable and call\r\n   `appInsights.setup()` without parameters.\r\n   > For more configuration options see below.\r\n6. Finally, start automatically collecting and sending data by calling\r\n   `appInsights.start();`.\r\n\r\n[these instructions]: https://azure.microsoft.com/documentation/articles/app-insights-create-new-resource/\r\n\r\n\r\n## Basic Usage\r\n\r\nTo track HTTP requests, unhandled exceptions and system metrics:\r\n\r\n```javascript\r\nlet appInsights = require(\"applicationinsights\");\r\nappInsights.setup(\"_your_ikey_\").start();\r\n```\r\n\r\n* If the instrumentation key is set in the environment variable\r\n  APPINSIGHTS\\_INSTRUMENTATIONKEY, `.setup()` can be called with no\r\n  arguments. This makes it easy to use different ikeys for different\r\n  environments.\r\n\r\nLoad the Application Insights library (i.e. `require(\"applicationinsights\")`) as\r\nearly as possible in your scripts, before loading other packages. This is needed\r\nso that the Application Insights libary can prepare later packages for tracking.\r\nIf you encounter conflicts with other libraries doing similar preparation, try\r\nloading the Application Insights library after those.\r\n\r\nBecause of the way JavaScript handles callbacks, additional work is necessary to\r\ntrack a request across external dependencies and later callbacks. By default\r\nthis additional tracking is enabled; disable it by calling\r\n`appInsights.setAutoDependencyCorrelation(false)` as described in the\r\nConfiguration section below.\r\n\r\n\r\n## Configuration\r\n\r\nThe appInsights object provides a number of configuration methods. They are\r\nlisted in the following snippet with their default values.\r\n\r\n```javascript\r\nlet appInsights = require(\"applicationinsights\");\r\nappInsights.setup(\"<instrumentation_key>\")\r\n    .setAutoDependencyCorrelation(true)\r\n    .setAutoCollectRequests(true)\r\n    .setAutoCollectPerformance(true)\r\n    .setAutoCollectExceptions(true)\r\n    .setAutoCollectDependencies(true)\r\n    .setAutoCollectConsole(true)\r\n    .start();\r\n```\r\n\r\n### Sampling\r\n\r\nBy default, the SDK will send all collected data to the Application Insights service. If you collect a lot of data, you might want to enable sampling to reduce the amount of data sent. Set the `samplingPercentage` field on the Config object of a Client to accomplish this. Setting `samplingPercentage` to 100 (the default) means all data will be sent, and 0 means nothing will be sent.\r\n\r\nIf you are using automatic correlation, all data associated with a single request will be included or excluded as a unit.\r\n\r\nAdd code such as the following to enable sampling:\r\n\r\n```javascript\r\nconst appInsights = require(\"applicationinsights\");\r\nappInsights.setup(\"<instrumentation_key>\");\r\nappInsights.client.config.samplingPercentage = 33; // 33% of all telemetry will be sent to Application Insights\r\nappInsights.start();\r\n```\r\n\r\n### Automatic third-party instrumentation\r\n\r\nIn order to track context across asynchronous calls, some changes are required in third party libraries such as mongodb and redis. By default ApplicationInsights will use `diagnostic-channel-publishers` to monkey-patch some of these libraries. This can be disabled by setting the `APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL` environment variable. Note that by setting that environment variable, events may no longer be correctly associated with the right operation.\r\n\r\nCurrently there are 6 packages which are instrumented: `bunyan`, `console`, `mongodb`, `mongodb-core`, `mysql` and `redis`.\r\n\r\nThe `bunyan` package and `console` messages will generate Application Insights Trace events based on whether `setAutoCollectConsole` is enabled. The `mongodb`, `mysql` and `redis` packages will generate Application Insights Dependency events based on whether `setAutoCollectDependencies` is enabled.\r\n\r\n## Track custom metrics\r\n\r\nYou can track any request, event, metric or exception using the Application\r\nInsights client. Examples follow:\r\n\r\n```javascript\r\nlet appInsights = require(\"applicationinsights\");\r\nappInsights.setup().start(); // assuming ikey in env var. start() can be omitted to disable any non-custom data\r\nlet client = appInsights.client;\r\nclient.trackEvent(\"my custom event\", {customProperty: \"custom property value\"});\r\nclient.trackException(new Error(\"handled exceptions can be logged with this method\"));\r\nclient.trackMetric(\"custom metric\", 3);\r\nclient.trackTrace(\"trace message\");\r\n\r\nlet http = require(\"http\");\r\nhttp.createServer( (req, res) => {\r\n  client.trackRequest(req, res); // Place at the beginning of your request handler\r\n});\r\n```\r\n\r\n## Preprocess data with Telemetry Processors\r\n\r\n```javascript\r\npublic addTelemetryProcessor(telemetryProcessor: (envelope: Contracts.Envelope, context: { http.RequestOptions, http.ClientRequest, http.ClientResponse, correlationContext }) => boolean)\r\n```\r\n\r\nYou can process and filter collected data before it is sent for retention using\r\n_Telemetry Processors_. Telemetry processors are called one by one in the\r\norder they were added before the telemetry item is sent to the cloud.\r\n\r\nIf a telemetry processor returns false or throws an error that telemetry item\r\nwill not be sent.\r\n\r\nAll telemetry processors receive the telemetry data and its envelope to inspect and\r\nmodify. They also receive a context object with available request information\r\nand the persistent request context as provided by\r\n`appInsights.getCorrelationContext()` (if automatic dependency correlation is\r\nenabled).\r\n\r\nThe TypeScript type for a telemetry processor is:\r\n\r\n```typescript\r\ntelemetryProcessor: (envelope: ContractsModule.Contracts.Envelope, context: { http.RequestOptions, http.ClientRequest, http.ClientResponse, correlationContext }) => boolean;\r\n```\r\n\r\nFor example, a processor that removes stack trace data from exceptions might be\r\nwritten and added as follows:\r\n\r\n```javascript\r\nfunction removeStackTraces ( envelope, context ) {\r\n  if (envelope.data.baseType === \"Microsoft.ApplicationInsights.ExceptionData\") {\r\n    var data = envelope.data.baseData;\r\n    if (data.exceptions && data.exceptions.length > 0) {\r\n      for (var i = 0; i < data.exceptions.length; i++) {\r\n        var exception = data.exceptions[i];\r\n        exception.parsedStack = null;\r\n        exception.hasFullStack = false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nappInsights.client.addTelemetryProcessor(removeStackTraces);\r\n```\r\n\r\nMore info on the telemetry API is available in [the docs][].\r\n\r\n[the docs]: https://azure.microsoft.com/documentation/articles/app-insights-api-custom-events-metrics/\r\n\r\n## Use multiple instrumentation keys\r\n\r\nYou can create multiple Azure Application Insights resources and send different\r\ndata to each by using their respective instrumentation keys (\"ikey\"). For\r\nexample:\r\n\r\n```javascript\r\nlet appInsights = require(\"applicationinsights\");\r\n\r\n// configure auto-collection under one ikey\r\nappInsights.setup(\"_ikey-A_\").start();\r\n\r\n// track some events manually under another ikey\r\nlet otherClient = appInsights.getClient(\"_ikey-B_\");\r\notherClient.trackEvent(\"my custom event\");\r\n```\r\n\r\n## Examples\r\n\r\n* Track dependencies\r\n\r\n    ```javascript\r\n    let appInsights = require(\"applicationinsights\");\r\n    let client = appInsights.getClient();\r\n\r\n    var success = false;\r\n    let startTime = Date.now();\r\n    // execute dependency call here....\r\n    let duration = Date.now() - startTime;\r\n    success = true;\r\n\r\n    client.trackDependency(\"dependency name\", \"command name\", duration, success);\r\n    ```\r\n\r\n* Assign custom properties to be included with all events\r\n\r\n    ```javascript\r\n    appInsights.client.commonProperties = {\r\n      environment: process.env.SOME_ENV_VARIABLE\r\n    };\r\n    ```\r\n\r\n* Manually track all HTTP GET requests\r\n\r\n    Note that all requests are tracked by default. To disable automatic\r\n    collection, call `.setAutoCollectRequests(false)` before calling `start()`.\r\n\r\n    ```javascript\r\n    var server = http.createServer((req, res) => {\r\n      if ( req.method === \"GET\" ) {\r\n          appInsights.client.trackRequest(req, res);\r\n      }\r\n      // other work here....\r\n      res.end();\r\n    });\r\n    ```\r\n\r\n* Track server startup time\r\n\r\n    ```javascript\r\n    let start = Date.now();\r\n    server.on(\"listening\", () => {\r\n      let duration = Date.now() - start;\r\n      appInsights.client.trackMetric(\"server startup time\", duration);\r\n    });\r\n    ```\r\n\r\n## Branches\r\n\r\n- Ongoing development takes place on the [develop][] branch. **Please submit\r\n  pull requests to this branch.**\r\n- Releases are merged to the [master][] branch and published to [npm][].\r\n\r\n[master]: https://github.com/Microsoft/ApplicationInsights-node.js/tree/master\r\n[develop]: https://github.com/Microsoft/ApplicationInsights-node.js/tree/develop\r\n[npm]: https://www.npmjs.com/package/applicationinsights\r\n\r\n## Links\r\n\r\n* [ApplicationInsights-Home][] is our central repo for libraries and info for\r\n  all languages and platforms.\r\n* Follow the latest Application Insights changes and announcements on the\r\n  [ApplicationInsights-Announcements][] repo.\r\n* [SDK Release Schedule][]\r\n\r\n[ApplicationInsights-Announcements]: https://github.com/Microsoft/ApplicationInsights-Announcements\r\n[ApplicationInsights-Home]: https://github.com/Microsoft/ApplicationInsights-Home\r\n[SDK Release Schedule]: https://github.com/Microsoft/ApplicationInsights-Home/wiki/SDK-Release-Schedule\r\n\r\n## Contributing\r\n\r\n1. Install all dependencies with `npm install`.\r\n2. Set an environment variable to your instrumentation key (optional).\r\n    ```bash\r\n    // windows\r\n    set APPINSIGHTS_INSTRUMENTATIONKEY=<insert_your_instrumentation_key_here>\r\n    // linux/macos\r\n    export APPINSIGHTS_INSTRUMENTATIONKEY=<insert_your_instrumentation_key_here>\r\n    ```\r\n3. Run tests\r\n    ```bash\r\n    npm test\r\n    ```\r\n\r\n---\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct][]. For more\r\ninformation see the [Code of Conduct FAQ][] or contact\r\n[opencode@microsoft.com][] with any additional questions or comments.\r\n\r\n[Microsoft Open Source Code of Conduct]: https://opensource.microsoft.com/codeofconduct/\r\n[Code of Conduct FAQ]: https://opensource.microsoft.com/codeofconduct/faq/\r\n[opencode@microsoft.com]: mailto:opencode@microsoft.com\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Microsoft/ApplicationInsights-node.js.git"
  },
  "scripts": {
    "build": "npm run build:deps && npm run build:compile",
    "build:compile": "tsc --project ./tsconfig.json",
    "build:deps": "npm update --dev",
    "clean": "rm -rf ./out && rm -rf ./node_modules",
    "prepare": "npm run build:compile",
    "prepublishOnly": "npm run build",
    "pretest": "npm run build",
    "test": "npm run test:ts && npm run test:js",
    "test:js": "mocha ./Tests/js --recursive",
    "test:ts": "mocha ./out/Tests --recursive"
  },
  "types": "./out/applicationinsights.d.ts",
  "version": "0.20.0"
}
